// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Reg');
gettext('Reg-rst');
gettext('Sys-reg');
gettext('Sys-reg-rst');
gettext('Blocks');
gettext('02-Reg');
gettext('02-Reg: 2 bits Register. Verilog implementation');
gettext('03-Reg');
gettext('03-Reg: 3 bits Register. Verilog implementation');
gettext('04-Reg');
gettext('04-Reg: 4 bits Register. Verilog implementation');
gettext('05-Reg');
gettext('05-Reg: 5 bits Register. Verilog implementation');
gettext('06-Reg');
gettext('06-Reg: 6 bits Register. Verilog implementation');
gettext('07-Reg');
gettext('07-Reg: 7 bits Register. Verilog implementation');
gettext('08-Reg');
gettext('08-Reg: 8 bits Register. Verilog implementation');
gettext('09-Reg');
gettext('09-Reg: 9 bits Register. Verilog implementation');
gettext('10-Reg');
gettext('10-Reg: 10 bits Register. Verilog implementation');
gettext('11-Reg');
gettext('11-Reg: 11 bits Register. Verilog implementation');
gettext('12-Reg');
gettext('12-Reg: 12 bits Register. Verilog implementation');
gettext('13-Reg');
gettext('13-Reg: 13 bits Register. Verilog implementation');
gettext('14-Reg');
gettext('14-Reg: 14 bits Register. Verilog implementation');
gettext('15-Reg');
gettext('15-Reg: 15 bits Register. Verilog implementation');
gettext('16-Reg');
gettext('16-Reg: 16 bits Register. Verilog implementation');
gettext('17-Reg');
gettext('17-Reg: 17 bits Register. Verilog implementation');
gettext('18-Reg');
gettext('18-Reg: 18 bits Register. Verilog implementation');
gettext('19-Reg');
gettext('19-Reg: 19 bits Register. Verilog implementation');
gettext('20-Reg');
gettext('20-Reg: 20 bits Register. Verilog implementation');
gettext('21-Reg');
gettext('21-Reg: 21 bits Register. Verilog implementation');
gettext('22-Reg');
gettext('22-Reg: 22 bits Register. Verilog implementation');
gettext('23-Reg');
gettext('23-Reg: 23 bits Register. Verilog implementation');
gettext('24-Reg');
gettext('24-Reg: 24 bits Register. Verilog implementation');
gettext('25-Reg');
gettext('25-Reg: 25 bits Register. Verilog implementation');
gettext('26-Reg');
gettext('26-Reg: 26 bits Register. Verilog implementation');
gettext('27-Reg');
gettext('27-Reg: 27 bits Register. Verilog implementation');
gettext('28-Reg');
gettext('28-Reg: 28 bits Register. Verilog implementation');
gettext('29-Reg');
gettext('29-Reg: 29 bits Register. Verilog implementation');
gettext('30-Reg');
gettext('30-Reg: 30 bits Register. Verilog implementation');
gettext('31-Reg');
gettext('31-Reg: 31 bits Register. Verilog implementation');
gettext('32-Reg');
gettext('32-Reg: 32 bits Register. Verilog implementation');
gettext('Blocks');
gettext('02-Reg-rst');
gettext('02-Reg-rst: 2 bits Register with reset. Verilog implementation');
gettext('03-Reg-rst');
gettext('03-Reg-rst: 3 bits Register with reset. Verilog implementation');
gettext('04-Reg-rst');
gettext('04-Reg-rst: 4 bits Register with reset. Verilog implementation');
gettext('05-Reg-rst');
gettext('05-Reg-rst: 5 bits Register with reset. Verilog implementation');
gettext('06-Reg-rst');
gettext('06-Reg-rst: 6 bits Register with reset. Verilog implementation');
gettext('07-Reg-rst');
gettext('07-Reg-rst: 7 bits Register with reset. Verilog implementation');
gettext('08-Reg-rst');
gettext('08-Reg-rst: 8 bits Register with reset. Verilog implementation');
gettext('09-Reg-rst');
gettext('09-Reg-rst: 9 bits Register with reset. Verilog implementation');
gettext('10-Reg-rst');
gettext('10-Reg-rst: 10 bits Register with reset. Verilog implementation');
gettext('11-Reg-rst');
gettext('11-Reg-rst: 11 bits Register with reset. Verilog implementation');
gettext('12-Reg-rst');
gettext('12-Reg-rst: 12 bits Register with reset. Verilog implementation');
gettext('13-Reg-rst');
gettext('13-Reg-rst: 13 bits Register with reset. Verilog implementation');
gettext('14-Reg-rst');
gettext('14-Reg-rst: 14 bits Register with reset. Verilog implementation');
gettext('15-Reg-rst');
gettext('15-Reg-rst: 15 bits Register with reset. Verilog implementation');
gettext('16-Reg-rst');
gettext('16-Reg-rst: 16 bits Register with reset. Verilog implementation');
gettext('17-Reg-rst');
gettext('17-Reg-rst: 17 bits Register with reset. Verilog implementation');
gettext('18-Reg-rst');
gettext('18-Reg-rst: 18 bits Register with reset. Verilog implementation');
gettext('19-Reg-rst');
gettext('19-Reg-rst: 19 bits Register with reset. Verilog implementation');
gettext('20-Reg-rst');
gettext('20-Reg-rst: 20 bits Register with reset. Verilog implementation');
gettext('21-Reg-rst');
gettext('21-Reg-rst: 21 bits Register with reset. Verilog implementation');
gettext('22-Reg-rst');
gettext('22-Reg-rst: 22 bits Register with reset. Verilog implementation');
gettext('23-Reg-rst');
gettext('23-Reg-rst: 23 bits Register with reset. Verilog implementation');
gettext('24-Reg-rst');
gettext('24-Reg-rst: 24 bits Register with reset. Verilog implementation');
gettext('25-Reg-rst');
gettext('25-Reg-rst: 25 bits Register with reset. Verilog implementation');
gettext('26-Reg-rst');
gettext('26-Reg-rst: 26 bits Register with reset. Verilog implementation');
gettext('27-Reg-rst');
gettext('27-Reg-rst: 27 bits Register with reset. Verilog implementation');
gettext('28-Reg-rst');
gettext('28-Reg-rst: 28 bits Register with reset. Verilog implementation');
gettext('29-Reg-rst');
gettext('29-Reg-rst: 29 bits Register with reset. Verilog implementation');
gettext('30-Reg-rst');
gettext('30-Reg-rst: 30 bits Register with reset. Verilog implementation');
gettext('31-Reg-rst');
gettext('31-Reg-rst: 31 bits Register with reset. Verilog implementation');
gettext('32-Reg-rst');
gettext('32-Reg-rst: 32 bits Register with reset. Verilog implementation');
gettext('02-Reg-rst');
gettext('02-Reg-rst: 2-bits Register with load and reset inputs. Blocks implementation');
gettext('2-to-1 Multplexer (2-bit channels). Verilog implementation');
gettext('02-Sys-reg-rst: 2 bits system register. Verilog implementation');
gettext('04-Reg-rst');
gettext('04-Reg-rst: 4 bits Register with load and reset inputs. Block implementation');
gettext('2-to-1 Multplexer (4-bit channels). Verilog implementation');
gettext('04-Sys-reg-rst: 4 bits system register. Verilog implementation');
gettext('08-Reg-rst');
gettext('08-Reg-rst: 8 bits Register with load and reset inputs. Block implementation');
gettext('2-to-1 Multplexer (8-bit channels). Verilog implementation');
gettext('08-Sys-reg-rst: 8 bits system register. Verilog implementation');
gettext('16-Reg-rst');
gettext('16-Reg-rst: 16 bits Register with load and reset inputs. Blocks implementation');
gettext('2-to-1 Multplexer (16-bit channels). Verilog implementation');
gettext('16-Sys-reg-rst: 16 bits system register. Verilog implementation');
gettext('32-Reg-rst');
gettext('32-Reg-rst: 32 bits Register with load and reset inputs. Blocks implementation');
gettext('2-to-1 Multplexer (32-bit channels). Verilog implementation');
gettext('32-Sys-reg-rst: 32 bits system register. Verilog implementation');
gettext('02-Reg');
gettext('02-Reg-block: 2 bits Register with load input. Blocks implementation');
gettext('02-Sys-reg: 2 bits system register. Verilog implementation');
gettext('04-Reg');
gettext('04-Reg: 4 bits Register with load input. Blocks implementation');
gettext('04-Sys-reg: 4 bits system register. Verilog implementation');
gettext('08-Reg');
gettext('08-Reg: 8 bits Register with load input. Blocks implementation');
gettext('08-Sys-reg: 8 bits system register. Verilog implementation');
gettext('16-Reg');
gettext('16-Reg: 16 bits Register with load input. Block implementation');
gettext('16-Sys-reg: 16 bits system register. Verilog implementation');
gettext('32-Reg');
gettext('32-Reg: 32 bits Register with load input. Block implementation');
gettext('32-Sys-reg: 32 bits system register. Verilog implementation');
gettext('Block');
gettext('02-Sys-reg');
gettext('03-Sys-reg');
gettext('03-Sys-reg: 3 bits system register. Verilog implementation');
gettext('04-Sys-reg');
gettext('05-Sys-reg');
gettext('05-Sys-reg: 5 bits system register. Verilog implementation');
gettext('06-Sys-reg');
gettext('06-Sys-reg: 6 bits system register. Verilog implementation');
gettext('07-Sys-reg');
gettext('07-Sys-reg: 7 bits system register. Verilog implementation');
gettext('08-Sys-reg');
gettext('09-Sys-reg');
gettext('09-Sys-reg: 9 bits system register. Verilog implementation');
gettext('10-Sys-reg');
gettext('10-Sys-reg: 10 bits system register. Verilog implementation');
gettext('11-Sys-reg');
gettext('11-Sys-reg: 11 bits system register. Verilog implementation');
gettext('12-Sys-reg');
gettext('12-Sys-reg: 12 bits system register. Verilog implementation');
gettext('13-Sys-reg');
gettext('13-Sys-reg: 13 bits system register. Verilog implementation');
gettext('14-Sys-reg');
gettext('14-Sys-reg: 14 bits system register. Verilog implementation');
gettext('15-Sys-reg');
gettext('15-Sys-reg: 15 bits system register. Verilog implementation');
gettext('16-Sys-reg');
gettext('17-Sys-reg');
gettext('17-Sys-reg: 17 bits system register. Verilog implementation');
gettext('18-Sys-reg');
gettext('18-Sys-reg: 18 bits system register. Verilog implementation');
gettext('19-Sys-reg');
gettext('19-Sys-reg: 19 bits system register. Verilog implementation');
gettext('20-Sys-reg');
gettext('20-Sys-reg: 20 bits system register. Verilog implementation');
gettext('21-Sys-reg');
gettext('21-Sys-reg: 21 bits system register. Verilog implementation');
gettext('22-Sys-reg');
gettext('22-Sys-reg: 22 bits system register. Verilog implementation');
gettext('23-Sys-reg');
gettext('23-Sys-reg: 23 bits system register. Verilog implementation');
gettext('24-Sys-reg');
gettext('24-Sys-reg: 24 bits system register. Verilog implementation');
gettext('25-Sys-reg');
gettext('25-Sys-reg: 25 bits system register. Verilog implementation');
gettext('26-Sys-reg');
gettext('26-Sys-reg: 26 bits system register. Verilog implementation');
gettext('27-Sys-reg');
gettext('27-Sys-reg: 27 bits system register. Verilog implementation');
gettext('28-Sys-reg');
gettext('28-Sys-reg: 28 bits system register. Verilog implementation');
gettext('29-Sys-reg');
gettext('29-Sys-reg: 29 bits system register. Verilog implementation');
gettext('30-Sys-reg');
gettext('30-Sys-reg: 30 bits system register. Verilog implementation');
gettext('31-Sys-reg');
gettext('31-Sys-reg: 31 bits system register. Verilog implementation');
gettext('32-Sys-reg');
gettext('Block');
gettext('02-Sys-reg-rst');
gettext('02-Sys-reg-rst: 2 bits system register with reset. Verilog implementation');
gettext('03-Sys-reg-rst');
gettext('03-Sys-reg-rst: 3 bits system register with reset. Verilog implementation');
gettext('04-Sys-reg-rst');
gettext('04-Sys-reg-rst: 4 bits system register with reset. Verilog implementation');
gettext('05-Sys-reg-rst');
gettext('05-Sys-reg-rst: 5 bits system register with reset. Verilog implementation');
gettext('06-Sys-reg-rst');
gettext('06-Sys-reg-rst: 6 bits system register with reset. Verilog implementation');
gettext('07-Sys-reg-rst');
gettext('07-Sys-reg-rst: 7 bits system register with reset. Verilog implementation');
gettext('08-Sys-reg-rst');
gettext('08-Sys-reg-rst: 8 bits system register with reset. Verilog implementation');
gettext('09-Sys-reg-rst');
gettext('09-Sys-reg-rst: 9 bits system register with reset. Verilog implementation');
gettext('10-Sys-reg-rst');
gettext('10-Sys-reg-rst: 10 bits system register with reset. Verilog implementation');
gettext('11-Sys-reg-rst');
gettext('11-Sys-reg-rst: 11 bits system register with reset. Verilog implementation');
gettext('12-Sys-reg-rst');
gettext('12-Sys-reg-rst: 12 bits system register with reset. Verilog implementation');
gettext('13-Sys-reg-rst');
gettext('13-Sys-reg-rst: 13 bits system register with reset. Verilog implementation');
gettext('14-Sys-reg-rst');
gettext('14-Sys-reg-rst: 14 bits system register with reset. Verilog implementation');
gettext('15-Sys-reg-rst');
gettext('15-Sys-reg-rst: 15 bits system register with reset. Verilog implementation');
gettext('16-Sys-reg-rst');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Verilog implementation');
gettext('17-Sys-reg-rst');
gettext('17-Sys-reg-rst: 17 bits system register with reset. Verilog implementation');
gettext('18-Sys-reg-rst');
gettext('18-Sys-reg-rst: 18 bits system register with reset. Verilog implementation');
gettext('19-Sys-reg-rst');
gettext('19-Sys-reg-rst: 19 bits system register with reset. Verilog implementation');
gettext('20-Sys-reg-rst');
gettext('20-Sys-reg-rst: 20 bits system register with reset. Verilog implementation');
gettext('21-Sys-reg-rst');
gettext('21-Sys-reg-rst: 21 bits system register with reset. Verilog implementation');
gettext('22-Sys-reg-rst');
gettext('22-Sys-reg-rst: 22 bits system register with reset. Verilog implementation');
gettext('23-Sys-reg-rst');
gettext('23-Sys-reg-rst: 23 bits system register with reset. Verilog implementation');
gettext('24-Sys-reg-rst');
gettext('24-Sys-reg-rst: 24 bits system register with reset. Verilog implementation');
gettext('25-Sys-reg-rst');
gettext('25-Sys-reg-rst: 25 bits system register with reset. Verilog implementation');
gettext('26-Sys-reg-rst');
gettext('26-Sys-reg-rst: 26 bits system register with reset. Verilog implementation');
gettext('27-Sys-reg-rst');
gettext('27-Sys-reg-rst: 27 bits system register with reset. Verilog implementation');
gettext('28-Sys-reg-rst');
gettext('28-Sys-reg-rst: 28 bits system register with reset. Verilog implementation');
gettext('29-Sys-reg-rst');
gettext('29-Sys-reg-rst: 29 bits system register with reset. Verilog implementation');
gettext('30-Sys-reg-rst');
gettext('30-Sys-reg-rst: 30 bits system register with reset. Verilog implementation');
gettext('31-Sys-reg-rst');
gettext('31-Sys-reg-rst: 31 bits system register with reset. Verilog implementation');
gettext('32-Sys-reg-rst');
gettext('32-Sys-reg-rst: 32 bits system register with reset. Verilog implementation');
gettext('02-Sys-reg-rst');
gettext('02-Sys-reg-rst: 02 bits system register with reset. Block implementation');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('04-Sys-reg-rst');
gettext('04-Sys-reg-rst: 4 bits system register with reset. Block implementation');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('08-Sys-reg-rst');
gettext('8-Sys-reg-rst: 8 bits system register with reset. Block implementation');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('16-Sys-reg-rst');
gettext('16-Sys-reg-rst: 16 bits system register with reset. Block implementation');
gettext('Generic: 16-bits generic constant');
gettext('32-Sys-reg-rst');
gettext('32-Sys-reg-rst: 32 bits system register with reset. Block implementation');
gettext('Generic: 32-bits generic constant');
gettext('02-Sys-reg');
gettext('02-Sys-reg-02-block: 2-bits system register. Block implementation');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('System - D Flip-flop. Capture data every system clock cycle. Verilog implementation');
gettext('Parameter: Initial value');
gettext('System clock');
gettext('Input data');
gettext('Output');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Not connected');
gettext('01-Sys-Regs-two-values');
gettext('02-Sys-Regs-four-values');
gettext('03-Sys-Regs-rst-two-values');
gettext('04-Reg-values-on-LEDs');
gettext('05-Reg-rst-values-on-LEDs');
gettext('TESTs');
gettext('00-Index');
gettext('Sys-reg-dff-02-block: Two bits system register. Block implementation');
gettext('02-Reg: 2 bits system register. Verilog implementation');
gettext('02-Reg-rst: 2 bits system register. Verilog implementation');
gettext('08-Reg: 8 bits system register. Verilog implementation');
gettext('08-Reg-rst: 8 bits system register. Verilog implementation');
gettext('16-Reg: 16 bits system register. Verilog implementation');
gettext('16-Reg-rst: 16 bits system register. Verilog implementation');
gettext('32-Reg: 32 bits system register. Verilog implementation');
gettext('32-Reg-rst: 32 bits system register. Verilog implementation');
gettext('# INDEX: IceRegs Collection');
gettext('### 2-bits');
gettext('### 3-bits');
gettext('### 4-bits');
gettext('### 5-bits');
gettext('### 6-bits');
gettext('### 7-bits');
gettext('### 16-bits');
gettext('### 8-bits');
gettext('### 32-bits');
gettext('Sys-reg-dff  \n(Didactic purposes)');
gettext('### 12-bits');
gettext('### 20-bits');
gettext('### 24-bits');
gettext('### 28-bits');
gettext('### 31-bits');
gettext('### 30-bits');
gettext('### 29-bits');
gettext('### 27-bits');
gettext('### 26-bits');
gettext('### 25-bits');
gettext('### 23-bits');
gettext('### 22-bits');
gettext('### 21-bits');
gettext('### 19-bits');
gettext('### 18-bits');
gettext('### 17-bits');
gettext('### 15-bits');
gettext('### 14-bits');
gettext('### 13-bits');
gettext('### 11-bits');
gettext('### 10-bits');
gettext('### 9-bits');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('01-Sys-Regs-two-values');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('D Flip-flop (verilog implementation)');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('16-bits Syscounter with reset');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('OR2: Two bits input OR gate');
gettext('Constant bit 0');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('1-bit generic constant (0/1)');
gettext('Data Ledoscope. 2 samples of 2bits data are taken initially, at the system clock rate');
gettext('Generic component with clk input');
gettext('Reg: 1-Bit register');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('2-to-1 Multplexer (2-bit channels)');
gettext('System TFF with toggle input: It toogles on every system cycle if the input is active');
gettext('RS-FF-set. RS Flip-flop with priority set');
gettext('Constant bit 1');
gettext('System - D Flip-flop. Capture data every system clock cycle');
gettext('## Example. Sys-Reg: Two values\n\nThis circuit generates two values of 2-bts: 2 and 1. The first value (1)  is generated at cycle 0 and the  \nsecond value (2) at cycle 1 \nThe two captured values can be observed with the Data LEDOscope');
gettext('Initial value: cycle 0');
gettext('2-bits Sys-Reg');
gettext('## Meassure with LEDOSCOPE-data\n\nIt stores two samples taken at the first two cycles  \n(cycle 0 and cycle 1)');
gettext('Select the 2-bit sample to show  \non the LEDs (sample 0 or sample 1)');
gettext('Showing the sample 0');
gettext('Value for cycles >= 1');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Input');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('Edge detector');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Data input');
gettext('Initial default  \nvalue: 0');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Select which sample is shown  \non the LEDs');
gettext('Sample 0');
gettext('The first two samples on the  \nchannels are captured  \n(Samples at cycles 0 to 1)');
gettext('Enable the capture ');
gettext('This signal is 1 initially');
gettext('RS-flip-flop');
gettext('Cycle number: 0-1');
gettext('The Flip-flips is reset  \nat the end of cycle 3');
gettext('4-cycles with pulse');
gettext('Sample 1');
gettext('Sample number currently  \ndisplayed');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Channel A');
gettext('Channel B');
gettext('Priority on set');
gettext('01-Sys-Regs-two-values');
gettext('01-Sys-Regs-two-values');
gettext('Button-tic: Configurable button that emits a tic when it is pressed. ECP5 FPGA Family');
gettext('Configurable button (pull-up on/off. Not on/off). ECP5 FPGA family');
gettext('01-Sys-Regs-two-values');
gettext('01-Sys-Regs-two-values');
gettext('6bits constant value: 0');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('LED0');
gettext('LED1');
gettext('LED2');
gettext('LED3');
gettext('LED4');
gettext('LED5');
gettext('LED6');
gettext('LED7');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('02-Sys-Regs-four-values');
gettext('Data Ledoscope. 4 samples of 8bits data are taken initially, at the system clock rate');
gettext('Reg-x08: 8-bits register');
gettext('Reg-x04: 4-bits register');
gettext('2-bits Syscounter');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('DFF-02: Two D flip-flops in paralell');
gettext('4-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('Counter-x02: 2-bits counter');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('## Example. Sys-Reg: Four values\n\nThis circuit generates four values of 8-bts: 0x80, 0x20, 0x08, and 0x02 in the cycles 0,1,2 and 3 respectivelly\nThe four captured values can be observed with the Data LEDOscope block');
gettext('8-bits Sys-Reg');
gettext('## Meassure with LEDOSCOPE-data\n\nIt stores four samples taken at the first four cycles  \n(cycle 0 - cycle 3)');
gettext('Select the 8-bit sample to show  \non the LEDs');
gettext('Value for cycles >= 3');
gettext('Show the stable value  \n(permanent regime)');
gettext('The first four samples on the  \nchannels are captured  \n(Samples at cycles 0 to 3)');
gettext('Cycle number: 0-3');
gettext('Sample 2');
gettext('Sample 3');
gettext('Priority for the set');
gettext('02-Sys-Regs-four-values');
gettext('LED7\n\n');
gettext('LED6\n');
gettext('LED3\n');
gettext('02-Sys-Regs-four-values');
gettext('02-Sys-Regs-four-values');
gettext('02-Sys-Regs-four-values');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('03-Sys-Regs-rst-two-values');
gettext('start: Start signal: It goes from 1 to 0 when the system clock starts. 1 cycle pulse witch');
gettext('## Example 3: Stream of two 8-bit values with reset\n\nA string of two values, 0x55 and 0xAA is generated. Then the register  \nis **reset** to its initial value (0x55) and the sequence is generated again');
gettext('Cycle 1');
gettext('Cycle 0');
gettext('Rst=1 in cycle 1');
gettext('LEDOscope  \n(4 samples)');
gettext('Showing sample 0  \non the LEDs');
gettext('The sequence is restared  \nin cycle 2');
gettext('| cycle 0 | cycle 1 | cycle 2 | cycle 3 |\n|---------|---------|---------|---------|\n|  55     |   AA    |   55    |   AA    |');
gettext('Reset');
gettext('Initial value: 1');
gettext('Initial value: 0');
gettext('Falling edge');
gettext('03-Sys-Regs-rst-two-values');
gettext('03-Sys-Regs-rst-two-values');
gettext('03-Sys-Regs-rst-two-values');
gettext('03-Sys-Regs-rst-two-values');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('04-Reg-values-on-LEDs');
gettext('## Example 4: Showing information on the LEDs\n\nTwo different values are shown on the LEDs: 0xAA and 0x55. The first value is  \nshown initially. When the button `SW1` is pressed, the value 0x55 is displayed');
gettext('Value shown when the  \nbutton is pressed');
gettext('8-bit Register');
gettext('04-Reg-values-on-LEDs');
gettext('04-Reg-values-on-LEDs');
gettext('04-Reg-values-on-LEDs');
gettext('04-Reg-values-on-LEDs');
gettext('Alhambra-II');
gettext('Nandland-go-board');
gettext('ULX3S-12F');
gettext('iCEBreaker');
gettext('iCESugar-1.5');
gettext('05-Reg-rst-values-on-LEDs');
gettext('## Example 5: Showing information on the LEDs\n\nTwo different values are shown on the LEDs: 0xAA and 0x55. The first value is  \nshown initially. When the button `SW1` is pressed, the value 0x55 is displayed  \nWhen the `SW2` is pressed, the register is reset and its initial value is displayed');
gettext('05-Reg-rst-values-on-LEDs');
gettext('05-Reg-rst-values-on-LEDs');
gettext('05-Reg-rst-values-on-LEDs');
gettext('05-Reg-rst-values-on-LEDs');
gettext('Regs');
gettext('Regs-rst');
gettext('Sys-Reg');
gettext('Sys-Reg-rst');
gettext('02-08-bits');
gettext('09-16-bits');
gettext('17-24-bits');
gettext('25-32-bits');
gettext('02-08-bits');
gettext('09-16-bits');
gettext('17-24-bits');
gettext('25-32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits Reg-rst: Manual testing\n\n');
gettext('Next');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Direct connection of a button. The button should not have any external circuit');
gettext('UINT8-3bits:  Extend a 3-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-5-3: Join the two buses into an 8-bits Bus');
gettext('5bits constant value: 0');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('03-Reg-rst: 3 bits system register. Verilog implementation');
gettext('# TEST: 3-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT8-4bits:  Extend a 4-bits unsigned integer to 8-bits ');
gettext('4bits constant value: 0');
gettext('04-Reg-rst: 4 bits system register. Verilog implementation');
gettext('# TEST: 4-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT8-5bits:  Extend a 5-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-3-5: Join the two buses into an 8-bits Bus');
gettext('3bits constant value: 0');
gettext('05-Reg-rst: 5 bits system register. Verilog implementation');
gettext('# TEST: 5-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT8-6bits:  Extend a 6-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-2-6: Join the two buses into an 8-bits Bus');
gettext('2bits constant value: 0');
gettext('06-Reg-rst: 6 bits system register. Verilog implementation');
gettext('# TEST: 6-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT8-7bits:  Extend a 7-bits unsigned integer to 8-bits ');
gettext('Bus7-Join-1-7: Join the two buses into an 8-bits Bus');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('07-Reg-rst: 7 bits system register. Verilog implementation');
gettext('# TEST: 7-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 8-bits Reg-rst: Manual testing\n\n');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('14-bits');
gettext('15-bits');
gettext('16-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Display16-8: Display a 16-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('Generic: 9-bits generic constant');
gettext('UINT16-9bits:  Extend a 9-bits unsigned integer to 16-bits ');
gettext('7bits constant value: 0');
gettext('Bus16-Join-7-9: Join the two same halves into an 16-bits Bus');
gettext('09-Reg-rst: 9 bits system register. Verilog implementation');
gettext('# TEST: 9-bits Reg-rst: Manual testing\n\n');
gettext('Byte 0  \n(least significant)  ');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT16-10bits:  Extend a 10-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-6-10: Join the two same halves into an 16-bits Bus');
gettext('10-Reg-rst: 10 bits system register. Verilog implementation');
gettext('# TEST: 10-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 11-bits generic constant');
gettext('UINT16-11bits:  Extend a 11-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-5-11: Join the two same halves into an 16-bits Bus');
gettext('11-Reg-rst: 11 bits system register. Verilog implementation');
gettext('# TEST: 11-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('UINT16-12bits:  Extend a 12-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-4-12: Join the two same halves into an 16-bits Bus');
gettext('12-Reg-rst: 12 bits system register. Verilog implementation');
gettext('# TEST: 12-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 13-bits generic constant');
gettext('UINT16-13bits:  Extend a 13-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-3-13: Join the two same halves into an 16-bits Bus');
gettext('13-Reg-rst: 13 bits system register. Verilog implementation');
gettext('# TEST: 13-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 14-bits generic constant');
gettext('UINT16-14bits:  Extend a 14-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-2-14: Join the two buses into a 16-bits Bus');
gettext('14-Reg-rst: 14 bits system register. Verilog implementation');
gettext('# TEST: 14-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT16-15bits:  Extend a 12-bits unsigned integer to 16-bits ');
gettext('Bus16-Join-1-15: Join the two buses into a 16-bits Bus');
gettext('Generic: 15-bits generic constant');
gettext('15-Reg-rst: 15 bits system register. Verilog implementation');
gettext('# TEST: 15-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Reg-rst: Manual testing\n\n');
gettext('17-bits');
gettext('18-bits');
gettext('19-bits');
gettext('20-bits');
gettext('21-bits');
gettext('22-bits');
gettext('23-bits');
gettext('24-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Display32-8: Display a 32-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('UINT32-17bits:  Extend a 17-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-15-17: Join the two buses into an 32-bits Bus');
gettext('15bits constant value: 0');
gettext('Generic: 17-bits generic constant');
gettext('17-Reg-rst: 17 bits system register. Verilog implementation');
gettext('# TEST: 17-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 18-bits generic constant');
gettext('UINT32-18bits:  Extend a 18-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-14-18: Join the two buses into an 32-bits Bus');
gettext('14bits constant value: 0');
gettext('18-Reg-rst: 18 bits system register. Verilog implementation');
gettext('# TEST: 18-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-19bits:  Extend a 19-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-13-19: Join the two buses into an 32-bits Bus');
gettext('13bits constant value: 0');
gettext('Generic: 19-bits generic constant');
gettext('19-Reg-rst: 19 bits system register. Verilog implementation');
gettext('# TEST: 19-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 20-bits generic constant');
gettext('UINT32-20bits:  Extend a 20-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-12-20: Join the two buses into an 32-bits Bus');
gettext('12bits constant value: 0');
gettext('20-Reg-rst: 20 bits system register. Verilog implementation');
gettext('# TEST: 20-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-21bits:  Extend a 21-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-11-21: Join the two buses into an 32-bits Bus');
gettext('11bits constant value: 0');
gettext('Generic: 21-bits generic constant');
gettext('21-Reg-rst: 21 bits system register. Verilog implementation');
gettext('# TEST: 21-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 22-bits generic constant');
gettext('UINT32-22bits:  Extend a 22-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-10-22: Join the two buses into an 32-bits Bus');
gettext('10bits constant value: 0');
gettext('22-Reg-rst: 22 bits system register. Verilog implementation');
gettext('# TEST: 22-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-23bits:  Extend a 23-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-9-23: Join the two buses into an 32-bits Bus');
gettext('9bits constant value: 0');
gettext('Generic: 23-bits generic constant');
gettext('23-Reg-rst: 23 bits system register. Verilog implementation');
gettext('# TEST: 23-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-24bits:  Extend a 24-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-8-24: Join the two buses into an 32-bits Bus');
gettext('8bits constant value: 0');
gettext('Generic: 24-bits generic constant');
gettext('24-Reg-rst: 24 bits system register. Verilog implementation');
gettext('# TEST: 24-bits Reg-rst: Manual testing\n\n');
gettext('25-bits');
gettext('26-bits');
gettext('27-bits');
gettext('28-bits');
gettext('29-bits');
gettext('30-bits');
gettext('31-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-25bits:  Extend a 25-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-7-25: Join the two buses into an 32-bits Bus');
gettext('Generic: 25-bits generic constant');
gettext('25-Reg-rst: 25 bits system register. Verilog implementation');
gettext('# TEST: 25-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 26-bits generic constant');
gettext('UINT32-26bits:  Extend a 26-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-6-26: Join the two buses into an 32-bits Bus');
gettext('26-Reg-rst: 26 bits system register. Verilog implementation');
gettext('# TEST: 26-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 27-bits generic constant');
gettext('UINT32-27bits:  Extend a 27-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-5-27: Join the two buses into an 32-bits Bus');
gettext('27-Reg-rst: 27 bits system register. Verilog implementation');
gettext('# TEST: 27-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-28bits:  Extend a 28-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-4-28: Join the two buses into an 32-bits Bus');
gettext('Generic: 28-bits generic constant');
gettext('28-Reg-rst: 28 bits system register. Verilog implementation');
gettext('# TEST: 28-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-29bits:  Extend a 29-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-3-29: Join the two buses into an 32-bits Bus');
gettext('Generic: 29-bits generic constant');
gettext('29-Reg-rst: 29 bits system register. Verilog implementation');
gettext('# TEST: 29-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-30bits:  Extend a 30-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-2-30: Join the two buses into an 32-bits Bus');
gettext('Generic: 30-bits generic constant');
gettext('30-Reg-rst: 30 bits system register. Verilog implementation');
gettext('# TEST: 30-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT32-31bits:  Extend a 31-bits unsigned integer to 32-bits ');
gettext('Bus32-Join-1-31: Join the two buses into an 32-bits Bus');
gettext('Generic: 31-bits generic constant');
gettext('31-Reg-rst: 31 bits system register. Verilog implementation');
gettext('# TEST: 31-bits Reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 32-bits Reg-rst: Manual testing\n\n');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('UINT4-3bit:  Extend a 3-bit unsigned integer to 4-bits ');
gettext('Bus4-Join-1-3: Join the two buses into a 4-bits Bus');
gettext('03-Reg: 3 bits system register. Verilog implementation');
gettext('# TEST: 3-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('04-Reg: 4 bits system register. Verilog implementation');
gettext('# TEST: 4-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('05-Reg: 5 bits system register. Verilog implementation');
gettext('# TEST: 5-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('06-Reg: 6 bits system register. Verilog implementation');
gettext('# TEST: 6-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('07-Reg: 7 bits system register. Verilog implementation');
gettext('# TEST: 7-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 8-bits Reg: Manual testing\n\n');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('14-bits');
gettext('15-bits');
gettext('16-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('09-Reg: 9 bits system register. Verilog implementation');
gettext('# TEST: 9-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('10-Reg: 10 bits system register. Verilog implementation');
gettext('# TEST: 10-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('11-Reg: 11 bits system register. Verilog implementation');
gettext('# TEST: 11-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('12-Reg: 12 bits system register. Verilog implementation');
gettext('# TEST: 12-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('13-Reg: 13 bits system register. Verilog implementation');
gettext('# TEST: 13-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('14-Reg: 14 bits system register. Verilog implementation');
gettext('# TEST: 14-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('15-Reg: 15 bits system register. Verilog implementation');
gettext('# TEST: 15-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Reg: Manual testing\n\n');
gettext('17-bits');
gettext('18-bits');
gettext('19-bits');
gettext('20-bits');
gettext('21-bits');
gettext('22-bits');
gettext('23-bits');
gettext('24-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('17-Reg: 17 bits system register. Verilog implementation');
gettext('# TEST: 17-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('18-Reg: 18 bits system register. Verilog implementation');
gettext('# TEST: 18-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('19-Reg: 19 bits system register. Verilog implementation');
gettext('# TEST: 19-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('20-Reg: 20 bits system register. Verilog implementation');
gettext('# TEST: 20-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('21-Reg: 21 bits system register. Verilog implementation');
gettext('# TEST: 21-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('22-Reg: 22 bits system register. Verilog implementation');
gettext('# TEST: 22-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('23-Reg: 23 bits system register. Verilog implementation');
gettext('# TEST: 23-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('24-Reg: 24 bits system register. Verilog implementation');
gettext('# TEST: 24-bits Reg: Manual testing\n\n');
gettext('25-bits');
gettext('26-bits');
gettext('27-bits');
gettext('28-bits');
gettext('29-bits');
gettext('30-bits');
gettext('31-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('25-Reg: 25 bits system register. Verilog implementation');
gettext('# TEST: 25-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('26-Reg: 26 bits system register. Verilog implementation');
gettext('# TEST: 26-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('27-Reg: 27 bits system register. Verilog implementation');
gettext('# TEST: 27-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('28-Reg: 28 bits system register. Verilog implementation');
gettext('# TEST: 28-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('29-Reg: 29 bits system register. Verilog implementation');
gettext('# TEST: 29-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('30-Reg: 30 bits system register. Verilog implementation');
gettext('# TEST: 30-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('31-Reg: 2 bits Register with load input. Verilog implementation');
gettext('# TEST: 31-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 32-bits Reg: Manual testing\n\n');
gettext('02-08-bits');
gettext('09-16-bits');
gettext('17-24-bits');
gettext('25-32-bits');
gettext('02-08-bits');
gettext('09-16-bits');
gettext('17-24-bits');
gettext('25-32-bits');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('2bits constant value: 3');
gettext('# TEST: 2-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Data Ledoscope. 2 samples of 4bits data are taken initially, at the system clock rate');
gettext('System TFF: It toogles its output on every system cycle');
gettext('Counter-x01: 1-bit counter');
gettext('Reg-4: 4 bits Register with load input');
gettext('Sys-reg-4: 4 bits system register');
gettext('3bits constant value: 7');
gettext('03-Sys-reg-rst: 3 bits system register. Verilog implementation');
gettext('# TEST: 3-bits Sys-reg-rst: Manual testing\n\n');
gettext('The first two samples on the  \nchannels are captured  \n(Samples at cycles 0 and 1)');
gettext('T flip-flop');
gettext('Cycle number: 0 and 1');
gettext('The Flip-flips is reset  \nat the end of cycle 1');
gettext('2-cycles with pulse');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 4-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('02-Sys-Regs-four-values');
gettext('05-Sys-reg-rst: 5 bits system register. Verilog implementation');
gettext('# TEST: 5-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('06-Sys-reg-rst: 6 bits system register. Verilog implementation');
gettext('# TEST: 6-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('07-Sys-reg-rst: 7 bits system register. Verilog implementation');
gettext('# TEST: 7-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Data Ledoscope. 2 samples of 8bits data are taken initially, at the system clock rate');
gettext('# TEST: 8-bits Sys-reg-rst: Manual testing\n\n');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('14-bits');
gettext('15-bits');
gettext('16-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('09-Sys-reg-rst: 9 bits system register. Verilog implementation');
gettext('# TEST: 9-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('10-Sys-reg-rst: 10 bits system register. Verilog implementation');
gettext('# TEST: 10-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('11-Sys-reg-rst: 11 bits system register. Verilog implementation');
gettext('# TEST: 11-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('12-Sys-reg-rst: 12 bits system register. Verilog implementation');
gettext('# TEST: 12-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('13-Sys-reg-rst: 13 bits system register. Verilog implementation');
gettext('# TEST: 13-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('14-Sys-reg-rst: 14 bits system register. Verilog implementation');
gettext('# TEST: 14-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('15-Sys-reg-rst: 15 bits system register. Verilog implementation');
gettext('# TEST: 15-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Sys-reg-rst: Manual testing\n\n');
gettext('17-bits');
gettext('18-bits');
gettext('19-bits');
gettext('20-bits');
gettext('21-bits');
gettext('22-bits');
gettext('23-bits');
gettext('24-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('17-Sys-reg-rst: 17 bits system register. Verilog implementation');
gettext('# TEST: 17-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('18-Sys-reg-rst: 18 bits system register. Verilog implementation');
gettext('# TEST: 18-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('19-Sys-reg-rst: 19 bits system register. Verilog implementation');
gettext('# TEST: 19-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('20-Sys-reg-rst: 20 bits system register. Verilog implementation');
gettext('# TEST: 20-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('21-Sys-reg-rst: 21 bits system register. Verilog implementation');
gettext('# TEST: 21-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('22-Sys-reg-rst: 22 bits system register. Verilog implementation');
gettext('# TEST: 22-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('block_name-rst: 2-bits system register with reset. Verilog implementation');
gettext('# TEST: 23-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('24-Sys-reg-rst: 24 bits system register. Verilog implementation');
gettext('# TEST: 24-bits Sys-reg-rst: Manual testing\n\n');
gettext('25-bits');
gettext('26-bits');
gettext('27-bits');
gettext('28-bits');
gettext('30-bits');
gettext('31-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('25-Sys-reg-rst: 25 bits system register. Verilog implementation');
gettext('# TEST: 25-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('26-Sys-reg-rst: 26 bits system register. Verilog implementation');
gettext('# TEST: 26-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('27-Sys-reg-rst: 27 bits system register. Verilog implementation');
gettext('# TEST: 27-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('28-Sys-reg-rst: 28 bits system register. Verilog implementation');
gettext('# TEST: 28-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('29-Sys-reg-rst: 29 bits system register. Verilog implementation');
gettext('# TEST: 29-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('31-Sys-reg-rst: 31 bits system register. Verilog implementation');
gettext('# TEST: 31-bits Sys-reg-rst: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 32-bits Sys-reg-rst: Manual testing\n\n');
gettext('02-bits');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input. Block implementation');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input. Block implementation');
gettext('DFF. D Flip-flop. Verilog implementation');
gettext('Sync-x01: 1-bit input with the system clock domain (Verilog implementation)');
gettext('RS-FF-set-verilog. RS Flip-flop with priority set. Implementation in verilog');
gettext('TFF-verilog. System TFF with toggle input: It toogles on every system cycle if the input is active. Verilog implementation');
gettext('# TEST: 2-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Bus4-Split-1-3: Split the 4-bits bus into two: 1-bit and 3-bits buses');
gettext('# TEST: 3-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 4-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 5-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 6-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 7-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 8-bits Sys-reg: Manual testing\n\n');
gettext('09-bits');
gettext('10-bits');
gettext('11-bits');
gettext('12-bits');
gettext('13-bits');
gettext('14-bits');
gettext('15-bits');
gettext('16-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Data Ledoscope. 2 samples of 16bits data are taken initially, at the system clock rate');
gettext('Reg-x16: 16bits register');
gettext('2-to-1 Multplexer (16-bit channels)');
gettext('# TEST: 9-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 10-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 11-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 12-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 13-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 14-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 15-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Sys-reg: Manual testing\n\n');
gettext('17-bits');
gettext('18-bits');
gettext('19-bits');
gettext('20-bits');
gettext('21-bits');
gettext('22-bits');
gettext('23-bits');
gettext('24-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Data Ledoscope. 2 samples of 32bits data are taken initially, at the system clock rate');
gettext('Reg-x32: 32bits register');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('2-to-1 Multplexer (32-bit channels)');
gettext('# TEST: 17-bits Sys-reg: Manual testing\n\n');
gettext('It is 1 if the sample 0 is  \nthe current sample');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 18-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 19-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 20-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 21-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 22-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 23-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 24-bits Sys-reg: Manual testing\n\n');
gettext('25-bits');
gettext('26-bits');
gettext('27-bits');
gettext('28-bits');
gettext('29-bits');
gettext('30-bits');
gettext('31-bits');
gettext('32-bits');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 25-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 26-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 27-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 28-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 29-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 30-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 31-bits Sys-reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 32-bits Sys-reg: Manual testing\n\n');
