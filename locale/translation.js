// Translation document for the collection
// =======================================
// This file contains the texts
// annotated for translation
//
// Instructions:
// 1. Open the PO file with Poedit
// 2. Press "Update" to update from sources

gettext('Old-DFFs');
gettext('Old-Regs');
gettext('Old-SRegs-old');
gettext('Regs');
gettext('SRegs');
gettext('SRegs-ld');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('DFF-chain-ini-x03');
gettext('DFF-chain-ini-x03: D Flip flops connected in serial. When ini=1, they are initialized to its parameter');
gettext('Init input: Active high  \nWhen ini = 1, the DFFs are set to their  \ninitial value (given by the parameter)');
gettext('Data input');
gettext('System clock');
gettext('Initial default  \nvalue: 0');
gettext('DFF-chain-load-x03');
gettext('DFF-chain-load: D Flip-flop with two input sources. When load=1 the paralell data (pd) is loaded. When load=0 the sd is loaded');
gettext('Serial data');
gettext('Paralell data');
gettext('Data loaded when  \nload = 0');
gettext('Data loaded when  \nload = 1');
gettext('the ini input is output  \nagain for easy connection  \nof more flip-flops');
gettext('DFF-ini-x03');
gettext('DFF-ini-x03: 3 Flip-flops in paralell with initialization  (verilog implementation)');
gettext('Parameter: Initial value');
gettext('Input data');
gettext('Output');
gettext('DFF-rst-x03');
gettext('DFF-rst-x03: Three D flip-flops in paralell with reset');
gettext('Bus3-Split-all: Split the 3-bits bus into three wires');
gettext('Bus3-Join-all: Joint three wires into a 3-bits Bus');
gettext('DFF-rst-x01: D Flip flop with reset input. When rst=1, the DFF is 0');
gettext('NOT gate (Verilog implementation)');
gettext('Two bits input And gate');
gettext('D Flip-flop (verilog implementation)');
gettext('Reset input: Active high  \nWhen rst = 1, the DFF is reset to 0');
gettext('Input');
gettext('# D Flip-Flop  \n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('DFF-x03');
gettext('DFF-03: Three D flip-flops in paralell');
gettext('DFF-chain-ini-x04');
gettext('DFF-chain-ini-x04: D Flip flops connected in serial. When ini=1, they are initialized to its parameter');
gettext('DFF-chain-load-x04');
gettext('DFF-ini-x04');
gettext('DFF-ini-x04: 4 Flip-flops in paralell with initialization  (verilog implementation)');
gettext('DFF-rst-x04');
gettext('DFF-rst-x04: Three D flip-flops in paralell with reset');
gettext('Bus4-Split-all: Split the 4-bits bus into its wires');
gettext('Bus4-Join-all: Join all the wires into a 4-bits Bus');
gettext('DFF-x04');
gettext('DFF-04: Three D flip-flops in paralell');
gettext('DFF-rst-x05');
gettext('DFF-rst-x05: Five D flip-flops in paralell with reset');
gettext('Bus5-Split-1-4: Split the 5-bits bus into two buses of 1 and 4 bits');
gettext('Bus5-Join-1-4: Join the two buses of 1 and 4 bits into a 5-bits Bus');
gettext('DFF-x05');
gettext('DFF-05: five D flip-flops in paralell');
gettext('DFF-rst-x06');
gettext('DFF-rst-x06: Six D flip-flops in paralell with reset');
gettext('Bus6-Split-2-4: Split the 6-bits bus into two buses of 2 and 4 wires');
gettext('Bus6-Join-2-4: Join all the two buses into a 6-bits Bus');
gettext('DFF-rst-x02: Two D flip-flops in paralell with reset');
gettext('Bus2-Split-all: Split the 2-bits bus into two wires');
gettext('Bus2-Join-all: Joint two wires into a 2-bits Bus');
gettext('DFF-rst-x07');
gettext('DFF-rst-x07: Seven D flip-flops in paralell with reset');
gettext('Bus7-Join-3-4: Join the two buses into a 7-bits Bus');
gettext('Bus7-Split-3-4: Split the 7-bits bus into two buses of 3 and 4 wires');
gettext('DFF-chain-ini-x08');
gettext('DFF-chain-ini-x08: D Flip flops connected in serial. When ini=1, they are initialized to its parameter');
gettext('DFF-chain-load-x08');
gettext('DFF-ini-x08');
gettext('DFF-ini-x08: 8 Flip-flops in paralell with initialization  (verilog implementation)');
gettext('DFF-initp-x08');
gettext('DFF-initp-x08. 8 D Flip-flops with init parameter (verilog implementation)');
gettext('DFF-rst-x08');
gettext('DFF-rst-x08: Eight D flip-flops in paralell with reset');
gettext('Bus8-Split-half: Split the 8-bits bus into two buses of the same size');
gettext('Bus8-Join-half: Join the two same halves into an 8-bits Bus');
gettext('DFF-x08');
gettext('DFF-08: Eigth D flip-flops in paralell');
gettext('Bus8-Split-all: Split the 8-bits bus into its wires');
gettext('Bus8-Join-all: Join all the wires into a 8-bits Bus');
gettext('DFF-rst-x12');
gettext('DFF-rst-x12: 12 D flip-flops in paralell with reset');
gettext('Bus12-Split-one-third: Split the 12-bits bus into three buses of equal size');
gettext('Bus12-Join-one-third: Join the three buses into an 12-bits Bus');
gettext('DFF-ini-x16');
gettext('DFF-ini-x16: 16 Flip-flops in paralell with initialization  (verilog implementation)');
gettext('DFF-rst-x16');
gettext('DFF-rst-x16: 16 D flip-flops in paralell with reset');
gettext('Bus16-Split-quarter: Split the 16-bits bus into four buses of the same size');
gettext('Bus16-Join-quarter: Join the four same buses into an 16-bits Bus');
gettext('DFF-x16');
gettext('DFF-x16: 16 D flip-flops in paralell');
gettext('DFF-rst-x20');
gettext('DFF-rst-x20: 20 D flip-flops in paralell with reset');
gettext('Bus20-Split-4-16: Split the 20-bits bus into two buses of 4 and 16 wires');
gettext('Bus20-Join-half: Join the two buses into an 20-bits Bus');
gettext('DFF-rst-x24');
gettext('DFF-rst-x24: 24 D flip-flops in paralell with reset');
gettext('Bus24-Split-one-third: Split the 24-bits bus into three buses of  the same size');
gettext('Bus24-Join-one-third: Join the three buses into an 24-bits Bus');
gettext('DFF-rst-x28');
gettext('DFF-rst-x28: 28 D flip-flops in paralell with reset');
gettext('Bus28-Split-4-24: Split the 28-bits bus into two buses of 4 and 24 wires');
gettext('Bus28-Join-4-24: Join the two buses into an 28-bits Bus');
gettext('DFF-ini-x32');
gettext('DFF-ini-x32: 32 Flip-flops in paralell with initialization  (verilog implementation)');
gettext('DFF-rst-x32');
gettext('DFF-rst-x32: 32 D flip-flops in paralell with reset');
gettext('Bus32-Split-quarter: Split the 32-bits bus into four buses of 8 wires');
gettext('Bus32-Join-quarter: Join the four buses into an 32-bits Bus');
gettext('DFF-x32');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('08-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Reg-rst');
gettext('Reg-x03-rst: 3-bits register with reset');
gettext('1-bit-Reg-rst: 1-Bit register with reset');
gettext('2-to-1 Multplexer (1-bit channels). Fippled version');
gettext('2-to-1 Multplexer (1-bit channels)');
gettext('OR2: Two bits input OR gate');
gettext('Mux 2-1');
gettext('D Flip-flip\n(System)');
gettext('Reg');
gettext('Reg-x03: 3-bits register');
gettext('Reg: 1-Bit register');
gettext('Reg-rst');
gettext('Reg-x04-rst: 4-bits register with rst');
gettext('Reg');
gettext('Reg-x04: 4-bits register');
gettext('Reg');
gettext('Reg-x05: 5-bits register');
gettext('Reg-rst');
gettext('Reg-x08-rst: 8-bits register with reset');
gettext('Reg');
gettext('Reg-x08: 8-bits register');
gettext('Reg');
gettext('Reg-x16: 16bits register');
gettext('Reg');
gettext('Reg-x32: 32bits register');
gettext('03-Bits');
gettext('04-Bits');
gettext('08-Bits');
gettext('SReg-right');
gettext('SReg-right-x3: 3 bits Shift register (to the right)');
gettext('SReg-left-sys');
gettext('SReg-left-sys-x4:  Shift register to the left. It shifts the data to the left on every clock cycle');
gettext('SL1: Shift  a 4-bit value one bit left. LSB is filled with 'in' and the MSB is written to out ');
gettext('Bus5-Join-4-1: Join the two buses of 4 and 1 bits into a 5-bits Bus');
gettext('SReg-right');
gettext('SReg-right-x4: 4 bits Shift register (to the right)');
gettext('SRegs-right');
gettext('SReg-right-x8: 8 bits Shift register (to the right)');
gettext('02-bits');
gettext('04-bits');
gettext('08-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Verilog');
gettext('Reg-rst');
gettext('Reg-rst-02: Two bits Register with load and reset inputs');
gettext('2-to-1 Multplexer (2-bit channels)');
gettext('Sys-reg-rst-02: Two bits system register with reset');
gettext('Sys-reg-02: Two bits system register');
gettext('Generic: 2-bits generic constant (0,1,2,3)');
gettext('Channel A');
gettext('Channel B');
gettext('Reg');
gettext('Reg-02: Two bits Register with load input');
gettext('Sys-reg-dff');
gettext('Sys-reg-dff-02: Two bits system register implemented directly from two D Flip-Flops');
gettext('System - D Flip-flop. Capture data every system clock cycle');
gettext('# D Flip-Flop  (system)\n\nIt stores the input data that arrives at cycle n  \nIts output is shown in the cycle n+1');
gettext('Sys-reg-rst');
gettext('Sys-reg');
gettext('Reg-rst-verilog');
gettext('Reg-rst-02-verilog: Two bits Register with load and reset inputs. Verilog implementation');
gettext('Reg-verilog');
gettext('Reg-02-verilog: Two bits Register with load input. Verilog implementation');
gettext('Sys-reg-rst-verilog');
gettext('Sys-reg-rst-02-verilog: Two bits system register with reset. Verilog implementation');
gettext('Reg');
gettext('Reg-4: 4 bits Register with load input');
gettext('Sys-reg-4: 4 bits system register');
gettext('2-to-1 Multplexer (4-bit channels)');
gettext('Sys-reg');
gettext('Reg');
gettext('Reg-8: 8 bits Register with load input');
gettext('Sys-reg-8: 8 bits system register');
gettext('2-to-1 Multplexer (8-bit channels)');
gettext('Sys-reg');
gettext('Reg');
gettext('Reg-16: 16 bits Register with load input');
gettext('Sys-reg-16: 16 bits system register');
gettext('2-to-1 Multplexer (16-bit channels)');
gettext('Bus16-Split-half: Split the 16-bits bus into two buses of the same size');
gettext('Bus16-Join-half: Join the two same halves into an 16-bits Bus');
gettext('Sys-reg');
gettext('Reg-rst');
gettext('Reg-rst-32: 32 bits Register with load and reset inputs');
gettext('Sys-reg-rst-32: 32 bits system register with reset');
gettext('2-to-1 Multplexer (32-bit channels)');
gettext('Generic: 32-bits generic constant');
gettext('Sys-reg-32: 32 bits system register');
gettext('Reg');
gettext('Reg-32: 32 bits Register with load input');
gettext('Sys-reg-rst');
gettext('Sys-reg');
gettext('02-Bits');
gettext('02-Bits');
gettext('Left');
gettext('Right');
gettext('Verilog');
gettext('SregL-ld-rst');
gettext('SregL-ld-rst-02: Two bits Shift register to the left with load and reset inputs');
gettext('SL1: Shift  a 2-bit value one bit left. LSB is filled with 'in' and the MSB is written to out ');
gettext('Combinational  \nShift-right');
gettext('SregL-ld');
gettext('SregL-ld-02: Two bits Shift register to the left with load input');
gettext('Combinational  \nShift-left');
gettext('Sys-SregL-ld-rst');
gettext('Sys-SregL-ld-rst-02: Two bits System Shift register to the left, with load and reset');
gettext('Data to load from the  \noutside');
gettext('Shifted internal data');
gettext('Mux-2-1');
gettext('Selects which data to load  \ninto the register:  \n* load=0: Shifted data\n* load=1: External data');
gettext('Load external data');
gettext('External data');
gettext('Serial input');
gettext('Sys-SregL-ld');
gettext('Sys-SregL-ld-02: Two bits System Shift register to the left, with load');
gettext('SregL-ld-rst-verilog');
gettext('SregL-ld-rst-02-verilog: Two bits Shift register to the left with load and reset inputs. Verilog implementation');
gettext('SregL-ld-verilog');
gettext('SregL-ld-02-verilog: Two bits Shift register to the left with load input. Verilog implementation');
gettext('Sys-SregL-ld-rst-verilog');
gettext('Sys-SregL-ld-02-verilog: Two bits System Shift register to the left, with load and reset. Verilog implementation');
gettext('Sys-SregL-ld-verilog');
gettext('Sys-SregL-ld-02-verilog: Two bits System Shift register to the left, with load. Verilog implementation');
gettext('Verilog');
gettext('SregR-ld-rst');
gettext('SregR-ld-rst-02: Two bits Shift register to the right with load and reset inputs');
gettext('SR1: Shift  a 2-bit value one bit right. MSB is filled with in');
gettext('SregR-ld');
gettext('SregR-ld-02: Two bits Shift register to the right with load input');
gettext('Sys-SregR-ld-rst');
gettext('Sys-SregR-ld-rst-02: Two bits System Shift register to the right, with reset and load');
gettext('Sys-SregR-ld');
gettext('Sys-SregR-ld-02: Two bits System Shift register to the right, with load');
gettext('SregR-ld-rst-verilog');
gettext('SregR-ld-rst-02-verilog: Two bits Shift register to the right with load and reset inputs. Verilog implementation');
gettext('SregR-ld-verilog');
gettext('SregR-ld-rst-02-verilog: Two bits Shift register to the right with load input. Verilog implementation');
gettext('Sys-SregR-ld-rst-verilog');
gettext('Sys-SregR-ld-rst-02-verilog: Two bits System Shift register to the right, with reset and load. Verilog implementation');
gettext('Sys-SregR-ld-verilog');
gettext('Sys-SregR-ld-02-verilog: Two bits System Shift register to the right, with load. Verilog implementation');
gettext('Left');
gettext('Right');
gettext('Verilog');
gettext('SregL-rst');
gettext('SregL-rst-02: Two bits Shift register to the left, with reset');
gettext('SregL');
gettext('SregL-02: Two bits Shift register to the left');
gettext('Sys-SregL-rst');
gettext('Sys-SregL-rst-02: Two bits System Shift register to the left, with reset');
gettext('Sys-SregL');
gettext('Sys-SregL-02: Two bits System Shift register to the left');
gettext('SregL-rst-verilog');
gettext('SregL-rst-02-verilog: Two bits Shift register to the left, with reset. Verilog implementation');
gettext('SregL-verilog');
gettext('SregL-02-verilog: Two bits Shift register to the left. Verilog iplementation');
gettext('Sys-SregL-rst-verilog');
gettext('Sys-SregL-rst-02-verilog: Two bits System Shift register to the left, with reset. Verilog implementation');
gettext('Sys-SregL-verilog');
gettext('Sys-SregL-02: Two bits System Shift register to the left. Verilog implementation');
gettext('Verilog');
gettext('SregR-rst');
gettext('SregR-rst-02: Two bits Shift register to the right, with reset');
gettext('SregR');
gettext('SregR-02: Two bits Shift register to the right');
gettext('Sys-SregR-rst');
gettext('Sys-SregR-rst-02: Two bits System Shift register to the right, with reset');
gettext('Sys-SregR');
gettext('Sys-SregR-02: Two bits System Shift register to the right');
gettext('SregR-rst-verilog');
gettext('SregR-rst-02-verilog: Two bits Shift register to the right, with reset. Verilog implementation');
gettext('SregR-verilog');
gettext('SregR-02-verilog: Two bits Shift register to the right. Verilog implementation');
gettext('Sys-SregR-rst-verilog');
gettext('Sys-SregR-rst-02-verilog: Two bits System Shift register to the right, with reset. Verilog implementation');
gettext('Sys-SregR-verilog');
gettext('Sys-SregR-02-verilog: Two bits System Shift register to the right. Verilog implementation');
gettext('TESTs');
gettext('00-Index');
gettext('# INDEX: IceRegs Collection');
gettext('## Regs');
gettext('### 2-bits');
gettext('## SRegs');
gettext('### 3-bits');
gettext('### 4-bits');
gettext('### 5-bits');
gettext('### 6-bits');
gettext('### 7-bits');
gettext('### 16-bits');
gettext('### 8-bits');
gettext('### 32-bits');
gettext('Sys-reg-dff  \n(Didactic purposes)');
gettext('## SRegs-ld');
gettext('Old-DFFs');
gettext('Old-Regs');
gettext('Old-SRegs');
gettext('Regs');
gettext('SReg');
gettext('SReg-ld');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('06-bits');
gettext('07-bits');
gettext('08-bits');
gettext('12-bits');
gettext('16-bits');
gettext('20-bits');
gettext('24-bits');
gettext('28-bits');
gettext('32-bits');
gettext('DFF');
gettext('DFF-chain-ini');
gettext('DFF-chain-load');
gettext('DFF-ini');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Configurable button (pull-up on/off. Not on/off)');
gettext('FPGA internal pull-up configuration on the input port');
gettext('Sync 1-bit input with the system clock domain');
gettext('Select positive or negative logic for the input (0=positive, 1=negative)');
gettext('Valor genérico constante, de 1 bits. Su valor se introduce como parámetro. Por defecto vale 0');
gettext('Puerta XOR');
gettext('Remove the rebound on a mechanical switch');
gettext('1bit register (implemented in verilog)');
gettext('Contador módulo M, ascendente, de 16 bits, con reset ');
gettext('Un bit constante a 1');
gettext('Generic: 3-bits generic constant (0-7)');
gettext('Internal pull-up  \n* 0: OFF\n* 1: ON');
gettext('Synchronization stage');
gettext('Normalization stage\n\n* 0: Wire\n* 1: signal inverted');
gettext('Debouncing stage');
gettext('### Pull-up parameter:\n\n0: No pull-up  \n1: Pull-up activated');
gettext('Only an FPGA pin can  \nbe connected here!!!');
gettext('The pull-up is connected  \nby default');
gettext('When k=0, it works like a wire  \n(The output is equal to the input)  \nWhen k=1, it act as a not gate\n(The output is the inverse of the input)');
gettext('### Truth table for XOR\n\n| k | input | output | function |\n|---|-------|--------|----------|\n| 0 | 0     |  0     | wire     |\n| 0 | 1     |  1     | wire     |\n| 1 | 0     |  1     | Not      |\n| 1 | 1     |  0     | Not      |');
gettext('Previous input  \nvalue');
gettext('Current input  \nvalue');
gettext('There is a change  \non the input');
gettext('Whenever there is a change in  \nthe input, the counter is started');
gettext('If the counter reaches it maximum  \nvalue, the input is considered stable  \nand it is captured');
gettext('### Time calculation\n\nFor CLK=12MHZ, a 16-bit counter reaches its  \nmaximum every 2 ** 16 * 1/F = 5.5ms aprox  \nIF more time is needed for debouncing,  \nuse a counter with more bits (17, 18...)');
gettext('## Debouncer  \n\nA value is considered stable when  \nthere is no changes during 5.5ms  \naprox. When a value is stable it is  \ncaptured on the output flip-flop');
gettext('Stable output');
gettext('Counter');
gettext('Initial value');
gettext('**Parámetro**: Módulo del contador');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Data Ledoscope. 2 samples of 8bits data are taken initially, at the system clock rate');
gettext('System TFF: It toogles its output on every system cycle');
gettext('RS-FF-set. RS Flip-flop with priority set');
gettext('Constant bit 1');
gettext('Constant bit 0');
gettext('Button-tic: Configurable button that emits a tic when it is pressed');
gettext('Rising-edge detector. It generates a 1-period pulse (tic) when a rising edge is detected on the input');
gettext('Biestable de datos (Tipo D). Cuando se recibe un tic por load se captura el dato');
gettext('Puerta NOT');
gettext('Puerta AND');
gettext('UINT8-3bits:  Extend a 3-bits unsigned integer to 8-bits ');
gettext('Bus8-Join-5-3: Join the two buses into an 8-bits Bus');
gettext('5bits constant value: 0');
gettext('Generic: 5-bits generic constant (0-31)');
gettext('# DFF-ini-x03: Manual testing\n\nThe value of the register is shown on the LEDscope');
gettext('Value at cycle 0');
gettext('Value at cycle 1');
gettext('Select which sample is shown  \non the LEDs');
gettext('Sample 0');
gettext('Sample 1');
gettext('The first two samples on the  \nchannels are captured  \n(Samples at cycles 0 and 1)');
gettext('Enable the capture ');
gettext('This signal is 1 initially');
gettext('RS-flip-flop');
gettext('T flip-flop');
gettext('Cycle number: 0 and 1');
gettext('The Flip-flips is reset  \nat the end of cycle 1');
gettext('2-cycles with pulse');
gettext('Priority for the set');
gettext('Button state signal');
gettext('Tic: button pressed');
gettext('Rising edge detector');
gettext('Pull up on/off');
gettext('Not on/off');
gettext('## Rising edge detector\n\nIt generates a 1-period pulse (tic) when a rising edge is detected on the  \ninput signal');
gettext('Input signal');
gettext('Current signal  \nstate');
gettext('Signal state in the previous  \nclock cycle');
gettext('If the current signal is 1 and its value in  \nthe previous clock cycle was 0, it means  \nthat a rising edge has been detected!  \nThe output es 1\n\nIn any other case the output is 0');
gettext('**Delay**: 0 clock cycles \n\nThere is no delay between the arrival of a rising edge  \nand its detection');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# DFF-rst-x03: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('01-manual-testing');
gettext('# DFF-x03: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('DFF');
gettext('DFF-chain-ini');
gettext('DFF-chain-load');
gettext('DFF-ini');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Generic: 4-bits generic constant (0-15)');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('UINT8-4bits:  Extend a 4-bits unsigned integer to 8-bits ');
gettext('4bits constant value: 0');
gettext('# DFF-ini-x04: Manual testing\n\nThe value of the register is shown on the LEDscope');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# DFF-rst-x04: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('01-manual-testing');
gettext('# DFF-x04: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('DFF');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# DFF-rst-x05: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('01-manual-testing');
gettext('Bus5-Join-3-2: Join the two buses of 3 and 2 bits into a 5-bits Bus');
gettext('# DFF-x05: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Bus6-Join-1-5: Join the two buses into a 6-bits Bus');
gettext('# DFF-rst-x06: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 6-bits generic constant (0-63)');
gettext('Bus7-Join-1-4: Join the two buses into a 7-bits Bus');
gettext('# DFF-rst-x07: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('DFF');
gettext('DFF-chain-ini');
gettext('DFF-chain-load');
gettext('DFF-ini');
gettext('DFF-initp');
gettext('DFF-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Alhambra-II');
gettext('DFF-chain-ini-x08');
gettext('Generic: 8-bits generic constant (0-255)');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# DFF-ini-x08: Manual testing\n\nThe value of the register is shown on the LEDscope');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 7-bits generic constant (0-127)');
gettext('Bus7-Join-1-7: Join the two buses into an 8-bits Bus');
gettext('# DFF-rst-x08: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('01-manual-testing');
gettext('# DFF-x08: Manual testing with two pushbutton and two LEDs\n\nThe state of the pushbuttons is shown on the LEDs');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 12-bits generic constant (0-4095)');
gettext('Bus12-Split-4-8: Split the 12-bits bus into two buses of 4 and 8 wires');
gettext('# DFF-rst-x12: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('Alhambra-II');
gettext('DFF-ini');
gettext('DFF-x16');
gettext('01-manual-testing');
gettext('Generic: 16-bits generic constant');
gettext('# DFF-rst-x16: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('# DFF-x16: Manual testing\n\nThe constant and the state of the button is shown on the LEDs ');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Data Ledoscope. 2 samples of 16bits data are taken initially, at the system clock rate');
gettext('Counter-x01: 1-bit counter');
gettext('Display16-8: Display a 16-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('# DFF-ini-x16: Manual testing\n\nThe value of the register is shown on the LEDscope');
gettext('Sample selection');
gettext('byte selection');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 20-bits generic constant');
gettext('4-to-1 Multplexer (8-bit channels)');
gettext('8bits constant value: 0');
gettext('Counter-x02: 2-bits counter');
gettext('Generic component with clk input');
gettext('Inc1-2bit: Increment a 2-bits number by one');
gettext('AdderK-2bit: Adder of 2-bit operand and 2-bit constant');
gettext('Adder-2bits: Adder of two operands of 2 bits');
gettext('Adder-1bit: Adder of two operands of 1 bit');
gettext('AdderC-1bit: Adder of two operands of 1 bit plus the carry in');
gettext('XOR gate: two bits input xor gate');
gettext('# DFF-rst-x20: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 24-bits generic constant');
gettext('# DFF-rst-x24: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Generic: 28-bits generic constant');
gettext('# DFF-rst-x28: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('Alhambra-II');
gettext('DFF');
gettext('DFF-ini');
gettext('01-manual-testing');
gettext('# DFF-rst-x32: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-testing');
gettext('Display32-8: Display a 32-bits value on an  8-LEDs. The sel input selects the byte to display ');
gettext('# DFF-ini-x32: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('01-manual-testing');
gettext('# DFF-x32: Manual testing\n\nThe constant is captured and shown on the LEDs ');
gettext('03-bits');
gettext('04-bits');
gettext('05-bits');
gettext('08-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Reg');
gettext('Reg-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('3bits constant value: 7');
gettext('## Example 1: Manual testing with LEDs and one button\n\nWhen the button is pressed the constant 0x7 value is captured and shown  \non the LEDs');
gettext('3-bits register');
gettext('01-Manual-testing');
gettext('Reg');
gettext('Reg-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('4bits constant value: 15');
gettext('## Example 1: Manual testing with LEDs and one button\n\nWhen the button SW1 is pressed the constant 0xF value is captured and shown  \non the LEDs. If the button SW2 is pressed, the register is reset to 0');
gettext('4-bits register');
gettext('01-Manual-testing');
gettext('## Example 1: Manual testing with LEDs and one button\n\nWhen the button is pressed the constant 0xF value is captured and shown  \non the LEDs');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('## Reg-x5: Manual testing with LEDs and one button\n\nWhen the button is pressed the constant value is captured and shown  \non the LEDs');
gettext('5-bits register');
gettext('Reg');
gettext('Reg-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('8-bits register');
gettext('01-Manual-testing');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('## Reg-x16: Manual testing with LEDs and one button\n\nWhen the button is pressed the constant 0xF value is captured and shown  \non the LEDs');
gettext('16-bits register');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('## Reg-x32: Manual testing with LEDs and one buttons\n\n');
gettext('03-Bits');
gettext('04-Bits');
gettext('08-Bits');
gettext('SReg-right');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('Input bit');
gettext('Set the input bit');
gettext('3-bits Shift register');
gettext('Shift to the right');
gettext('## Example 1: SReg-rightx3: Manual testing  \n\nThe sw1 button is used for setting the input bit  \n(it is shown on LED7). When the sw2 button is pressed,  \nthe register is shifted to the right and the input bit is  \ncaptured');
gettext('SReg-left');
gettext('SReg-right');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('Ledoscope. Capture the input signal during the first 4 cycles after circuit initialization');
gettext('2-bits Syscounter');
gettext('DFF-02: Two D flip-flops in paralell');
gettext('# SReg-left-x04: Manual testing');
gettext('4-bits Shift register');
gettext('The input channel is captured  \non the register. One bit per  \nsystem clock');
gettext('RS FlipFlop initialized to 1');
gettext('while 1, the shift register  \nis capturing');
gettext('2-bits counter');
gettext('After 4 cycles the Flip-Flop is  \nreset and it stops capturing  \nbits');
gettext('As the 2-bits system counter is counting  \nall the time, the done signal is only  \ngenerated when the counter reaches the maximum  \nvalue and the Ledoscope is on (busy)');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('## Example 1: SReg-rightx4: Manual testing  \n\nThe sw1 button is used for setting the input bit  \n(it is shown on LED7). When the sw2 button is pressed,  \nthe register is shifted to the right and the input bit is  \ncaptured');
gettext('SReg-right');
gettext('Alhambra-II');
gettext('01-Manual-testing');
gettext('8-bits Shift register');
gettext('## Example 1: SReg-rightx8: Manual testing  \n\nThe sw1 button is used for setting the input bit  \n(it is shown on LED7). When the sw2 button is pressed,  \nthe register is shifted to the right and the input bit is  \ncaptured');
gettext('02-bits');
gettext('04-bits');
gettext('08-bits');
gettext('16-bits');
gettext('32-bits');
gettext('Reg');
gettext('Reg-rst');
gettext('Sys-reg');
gettext('Sys-reg-dff');
gettext('Sys-reg-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('16-bits Syscounter with reset');
gettext('Inc1-16bit: Increment a 16-bits number by one');
gettext('AdderK-16bit: Adder of 16-bit operand and 16-bit constant');
gettext('Adder-16bits: Adder of two operands of 16 bits');
gettext('Adder-8bits: Adder of two operands of 8 bits');
gettext('Adder-4bits: Adder of two operands of 4 bits');
gettext('AdderC-4bits: Adder of two operands of 4 bits and Carry in');
gettext('AdderC-8bits: Adder of two operands of 8 bits and Carry in');
gettext('Edges detector. It generates a 1-period pulse (tic) when either a rising edge or a falling edge is detected on the input');
gettext('1-bit generic constant (0/1)');
gettext('# TEST: 2-bits Reg-rst: Manual testing\n\n');
gettext('Next');
gettext('Edge detector');
gettext('## Edges detector\n\nIt generates a 1-period pulse (tic) when an edge (Rising or falling) is detected on the  \ninput signal');
gettext('The output is 1 if the current value is 1 and the  \nprevious 0, or if the current value is 0 and the  \nprevious 1\n');
gettext('In any other case the output is 0');
gettext('01-manual-test');
gettext('# TEST: 2-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('2bits constant value: 0');
gettext('Data Ledoscope. 2 samples of 2bits data are taken initially, at the system clock rate');
gettext('System TFF with toggle input: It toogles on every system cycle if the input is active');
gettext('# TEST: 2-bits Sys-reg-dff: Manual testing\n\n');
gettext('The first two samples on the  \nchannels are captured  \n(Samples at cycles 0 to 1)');
gettext('Cycle number: 0-1');
gettext('The Flip-flips is reset  \nat the end of cycle 3');
gettext('4-cycles with pulse');
gettext('Sample number currently  \ndisplayed');
gettext('Priority on set');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('2bits constant value: 3');
gettext('# TEST: 2-bits Sys-reg-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-reg: Manual testing\n\n');
gettext('Reg');
gettext('Sys-Reg');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 4-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 4-bits Sys-reg: Manual testing\n\n');
gettext('Reg');
gettext('Sys-Reg');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 8-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 8-bits Sys-reg: Manual testing\n\n');
gettext('Reg');
gettext('Sys-Reg');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 16-bits Sys-reg: Manual testing\n\n');
gettext('Reg');
gettext('Reg-rst');
gettext('Sys-reg');
gettext('Sys-reg-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('OR-BUS2: OR gate with 2-bits bus input');
gettext('Direct connection of a button. The button should not have any external circuit');
gettext('# TEST: 32-bits Reg-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 32-bits Reg: Manual testing\n\n');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 32-bits Sys-reg: Manual testing\n\n');
gettext('01-manual-test');
gettext('02-Bits');
gettext('02-Bits');
gettext('Left');
gettext('Right');
gettext('SregL-ld');
gettext('SregL-ld-rst');
gettext('Sys-SregL-ld');
gettext('Sys-SregL-ld-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegL-ld-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegL-ld: Manual testing\n\n');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegL-ld-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegL-ld: Manual testing\n\n');
gettext('SregR-ld');
gettext('SregR-ld-rst');
gettext('Sys-SregR-ld');
gettext('Sys-SregR-ld-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegR-ld-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegR-ld: Manual testing\n\n');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('Sys-SregR-load-02: Two bits System Shift register to the right, with reset and load');
gettext('# TEST: 2-bits Sys-SRegR-ld-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegR-ld: Manual testing\n\n');
gettext('Left');
gettext('Right');
gettext('SregL');
gettext('SregL-rst');
gettext('Sys-sregL');
gettext('Sys-sregL-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegL-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegL: Manual testing\n\n');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegL-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegL: Manual testing\n\n');
gettext('SregR');
gettext('SregR-rst');
gettext('Sys-sregR');
gettext('Sys-sregR-rst');
gettext('Alhambra-II');
gettext('Alhambra-II');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegR-rst: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits SRegR: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegR: Manual testing\n\n');
gettext('01-manual-test');
gettext('# TEST: 2-bits Sys-SRegR-rst: Manual testing\n\n');
